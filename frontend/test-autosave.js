// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
// –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞

async function testAutoSave() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –¥–æ—Å—Ç—É–ø–µ–Ω
  try {
    const response = await fetch('/api/health');
    const health = await response.json();
    console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω:', health);
  } catch (error) {
    console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  try {
    const authResponse = await fetch('/api/auth/profile', {
      credentials: 'include'
    });
    if (authResponse.ok) {
      const profile = await authResponse.json();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', profile.email);
    } else {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞
  try {
    const lessonData = {
      title: '–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ ' + Date.now(),
      content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ',
      type: 'lesson',
      moduleId: null
    };
    
    const createResponse = await fetch('/api/blocks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      credentials: 'include',
      body: JSON.stringify(lessonData)
    });
    
    if (createResponse.ok) {
      const createdLesson = await createResponse.json();
      console.log('‚úÖ –£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω:', createdLesson);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
      const updatedData = {
        ...createdLesson,
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫ ' + Date.now(),
        content: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ'
      };
      
      const updateResponse = await fetch(`/api/blocks/${createdLesson.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(updatedData)
      });
      
      if (updateResponse.ok) {
        const updatedLesson = await updateResponse.json();
        console.log('‚úÖ –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedLesson);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        const getResponse = await fetch(`/api/blocks/${createdLesson.id}`, {
          credentials: 'include'
        });
        
        if (getResponse.ok) {
          const fetchedLesson = await getResponse.json();
          console.log('‚úÖ –£—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î:', fetchedLesson);
          
          if (fetchedLesson.title === updatedData.title) {
            console.log('üéâ –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
          } else {
            console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
          }
        }
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:', await updateResponse.text());
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞:', await createResponse.text());
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAutoSave();