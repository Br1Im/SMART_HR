#!/bin/bash

# üéõÔ∏è –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SmartCourse
APP_DIR="/var/www/hr-course/SMART_HR"
COMPOSE_FILE="docker-compose.prod.yml"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}$1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
check_directory() {
    if [ ! -d "$APP_DIR" ]; then
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $APP_DIR"
        exit 1
    fi
    cd "$APP_DIR"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
show_help() {
    print_header "üéõÔ∏è  SmartCourse Management Tool"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bash manage.sh [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  start      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  stop       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  restart    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  status     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  logs       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  logs-f     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  update     - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Git"
    echo "  rebuild    - –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    echo "  backup     - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"
    echo "  restore    - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    echo "  clean      - –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker –æ–±—Ä–∞–∑—ã"
    echo "  health     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "  ssl        - –û–±–Ω–æ–≤–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
    echo "  nginx      - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Nginx (start|stop|restart|status)"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  bash manage.sh start"
    echo "  bash manage.sh logs backend"
    echo "  bash manage.sh nginx restart"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    print_status "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ SmartCourse..."
    check_directory
    docker-compose -f $COMPOSE_FILE up -d
    print_status "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ SmartCourse..."
    check_directory
    docker-compose -f $COMPOSE_FILE down
    print_status "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
    print_status "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ SmartCourse..."
    check_directory
    docker-compose -f $COMPOSE_FILE restart
    print_status "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!"
}

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
show_status() {
    print_header "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ SmartCourse"
    check_directory
    docker-compose -f $COMPOSE_FILE ps
    echo ""
    print_header "üåê –°—Ç–∞—Ç—É—Å Nginx"
    systemctl status nginx --no-pager -l
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    check_directory
    if [ -n "$2" ]; then
        print_status "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞: $2"
        docker-compose -f $COMPOSE_FILE logs "$2"
    else
        print_status "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        docker-compose -f $COMPOSE_FILE logs
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
show_logs_follow() {
    check_directory
    if [ -n "$2" ]; then
        print_status "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞: $2"
        docker-compose -f $COMPOSE_FILE logs -f "$2"
    else
        print_status "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        docker-compose -f $COMPOSE_FILE logs -f
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
update_app() {
    print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ Git..."
    check_directory
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    current_branch=$(git branch --show-current)
    print_status "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $current_branch"
    
    # –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    git fetch origin
    git pull origin $current_branch
    
    if [ $? -eq 0 ]; then
        print_status "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        print_warning "–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: bash manage.sh rebuild"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞"
        exit 1
    fi
}

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
rebuild_app() {
    print_status "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    check_directory
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    docker-compose -f $COMPOSE_FILE down
    
    # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã
    docker-compose -f $COMPOSE_FILE build --no-cache
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    docker-compose -f $COMPOSE_FILE up -d
    
    print_status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!"
}

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î
backup_database() {
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    check_directory
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    mkdir -p backups
    
    # –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
    backup_file="backups/smartcourse_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    # –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
    docker-compose -f $COMPOSE_FILE exec -T database pg_dump -U smartcourse smartcourse > "$backup_file"
    
    if [ $? -eq 0 ]; then
        print_status "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_file"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        exit 1
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
restore_database() {
    if [ -z "$2" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: bash manage.sh restore backup_file.sql"
        exit 1
    fi
    
    backup_file="$2"
    if [ ! -f "$backup_file" ]; then
        print_error "–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file"
        exit 1
    fi
    
    print_warning "–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 0
    fi
    
    print_status "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑: $backup_file"
    check_directory
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î
    docker-compose -f $COMPOSE_FILE exec -T database psql -U smartcourse -d smartcourse < "$backup_file"
    
    if [ $? -eq 0 ]; then
        print_status "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        exit 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ Docker
clean_docker() {
    print_status "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker system prune -f
    docker image prune -f
    print_status "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
health_check() {
    print_header "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    if [ -f "check-status.sh" ]; then
        bash check-status.sh
    else
        print_warning "–°–∫—Ä–∏–ø—Ç check-status.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        show_status
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL
update_ssl() {
    print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    
    # –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    certbot renew
    
    if [ $? -eq 0 ]; then
        print_status "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!"
        systemctl reload nginx
        print_status "Nginx –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
        exit 1
    fi
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Nginx
manage_nginx() {
    if [ -z "$2" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: start|stop|restart|status|reload"
        exit 1
    fi
    
    action="$2"
    case $action in
        start)
            print_status "–ó–∞–ø—É—Å–∫ Nginx..."
            systemctl start nginx
            ;;
        stop)
            print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx..."
            systemctl stop nginx
            ;;
        restart)
            print_status "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx..."
            systemctl restart nginx
            ;;
        reload)
            print_status "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx..."
            systemctl reload nginx
            ;;
        status)
            print_header "üìä –°—Ç–∞—Ç—É—Å Nginx"
            systemctl status nginx --no-pager -l
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $action"
            print_error "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: start|stop|restart|status|reload"
            exit 1
            ;;
    esac
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "$1" in
    start)
        start_services
        ;;
    stop)
        stop_services
        ;;
    restart)
        restart_services
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs "$@"
        ;;
    logs-f)
        show_logs_follow "$@"
        ;;
    update)
        update_app
        ;;
    rebuild)
        rebuild_app
        ;;
    backup)
        backup_database
        ;;
    restore)
        restore_database "$@"
        ;;
    clean)
        clean_docker
        ;;
    health)
        health_check
        ;;
    ssl)
        update_ssl
        ;;
    nginx)
        manage_nginx "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        show_help
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo ""
        show_help
        exit 1
        ;;
esac