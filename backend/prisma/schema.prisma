// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums для ролей и других типов
enum UserRole {
  ADMIN
  CURATOR
  CLIENT
  CANDIDATE
}

enum ConsentType {
  PERSONAL_DATA
  MARKETING
  ANALYTICS
  COOKIES
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String
  role      UserRole @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  ownedOrgs    Org[]       @relation("OrgOwner")
  auditLogs    AuditLog[]
  consents     Consent[]
  courses      Course[]

  @@map("users")
}

model Org {
  id        String   @id @default(cuid())
  name      String
  inn       String   @unique
  site      String?
  status    String   @default("active")
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  owner     User      @relation("OrgOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  contacts  Contact[]

  @@map("organizations")
}

model Contact {
  id        String   @id @default(cuid())
  fullName  String
  email     String   @unique
  phone     String?
  role      String?
  orgId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  organization Org @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model AuditLog {
  id        String      @id @default(cuid())
  userId    String
  action    AuditAction
  entity    String      // Название сущности (User, Org, Contact)
  entityId  String      // ID сущности
  details   String?     // JSON с деталями изменений
  timestamp DateTime    @default(now())

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Consent {
  id        String      @id @default(cuid())
  userId    String
  type      ConsentType
  grantedAt DateTime    @default(now())
  basis     String      // Основание для обработки (согласие, договор, etc.)
  details   String?     // Дополнительная информация

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("consents")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Float?
  duration    Int?     // Длительность в часах
  level       String   @default("BEGINNER") // BEGINNER, INTERMEDIATE, ADVANCED
  isPublished Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blocks      Block[]

  @@map("courses")
}

model Block {
  id          String   @id @default(cuid())
  title       String
  content     String?
  type        String   @default("TEXT") // TEXT, VIDEO, QUIZ, ASSIGNMENT
  position    Int      // Позиция блока в курсе
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("blocks")
}